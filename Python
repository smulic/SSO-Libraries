import sys
import requests
import json
from urllib.parse import urlencode

# Constants for URLs used in the OAuth process and API requests
class ConstURL:
    AUTH_URL = "https://launchpad.classlink.com/oauth2/v2/auth"
    EXCHANGE_URL = "https://launchpad.classlink.com/oauth2/v2/token"
    INFO_URL = "https://nodeapi.classlink.com/"

# Custom exception for handling configuration errors
class ConfigNotSetError(Exception):
    def __init__(self, value):
        message = f"The config is not set. You need to call setConfig(client_Id, client_Secret) before {value}"
        super().__init__(message)

# Global variables to hold client ID and client secret
client_id = None
client_secret = None

# Function to set the client ID and secret for OAuth
def set_config(client_id_input, client_secret_input):
    global client_id, client_secret
    if not isinstance(client_id_input, str):
        raise ValueError("clientId must be a string")
    if not isinstance(client_secret_input, str):
        raise ValueError("clientSecret must be a string")
    
    client_id = client_id_input
    client_secret = client_secret_input

# Function to construct the URL for obtaining the authorization code
def get_code_url(scope="profile", redirect_uri="http://localhost:8080/code"):
    if not client_id:
        raise ConfigNotSetError("getCodeURL")
    query_str = urlencode({"client_id": client_id, "scope": scope, "redirect_uri": redirect_uri, "response_type": "code"})
    return f"{ConstURL.AUTH_URL}?{query_str}"

# Function to obtain the access token using the authorization code
def get_token(code):
    if not client_id or not client_secret:
        raise ConfigNotSetError("getToken")
    if not isinstance(code, str):
        raise TypeError("Code must be a string")
    
    payload = {'client_id': client_id, 'client_secret': client_secret, 'code': code}
    response = requests.post(ConstURL.EXCHANGE_URL, data=payload)
    return json.loads(response.text)["access_token"]

# Function to make API requests to the specified endpoint and optionally extract specific nodes from the JSON response
def get_info(bearer, endpoint, extract_node=None):
    if not isinstance(bearer, str) or not isinstance(endpoint, str):
        raise TypeError("Bearer and endpoint must be strings")
    if extract_node is not None and not isinstance(extract_node, list):
        raise TypeError("Extract node must be a list of strings")
    
    url = f"{ConstURL.INFO_URL}{endpoint}"
    headers = {'Authorization': f"Bearer {bearer}"}
    response = requests.get(url, headers=headers)
    content = json.loads(response.text)
    
    if extract_node is None:
        return content
    else:
        return {node: content[node] for node in extract_node if node in content}

# User information retrieval functions
def get_user_info(bearer):
    return get_info(bearer, "v2/my/info")

def get_user_district(bearer):
    return get_info(bearer, "v2/my/district")

def get_user_profiles(bearer):
    return get_info(bearer, "v2/my/profiles")

def get_user_children(bearer):
    return get_info(bearer, "v2/my/students")

def get_user_groups(bearer):
    return get_info(bearer, "my/groups")
