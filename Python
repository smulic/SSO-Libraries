import sys
from urllib.parse import urlencode
import requests
import json
from typing import List, Optional, Dict, Any

# Custom exception for configuration errors
class ConfigNotSetError(Exception):
    def __init__(self, value: str):
        self.value = f"The config is not set. You need to call setConfig(client_Id, client_Secret) before {value}"
    def __str__(self) -> str:
        return repr(self.value)

# Class to hold constant URLs used for authentication and API requests
class CONST:
    AUTH_URL = "https://launchpad.classlink.com/oauth2/v2/auth"
    EXCHANGE_URL = "https://launchpad.classlink.com/oauth2/v2/token"
    INFO_URL = "https://nodeapi.classlink.com/"

# Global variables to store client ID and client secret
clientId: Optional[str] = None
clientSecret: Optional[str] = None

# Function to set the client ID and client secret
def setConfig(client_Id: str, client_Secret: str) -> None:
    global clientId, clientSecret
    if not isinstance(client_Id, str):
        raise ValueError("clientId must be a string")
    if not isinstance(client_Secret, str):
        raise ValueError("clientSecret must be a string")
    clientId = client_Id
    clientSecret = client_Secret

# Function to generate the authorization URL
def getCodeURL(scope: str = "profile", redirectURI: str = "http://localhost:8080/code") -> str:
    if not clientId:
        raise ConfigNotSetError("getCodeURL")
    queryStr = urlencode({"client_id": clientId, "scope": scope, "redirect_uri": redirectURI, "response_type": "code"})
    return f"{CONST.AUTH_URL}?{queryStr}"

# Function to exchange authorization code for access token
def getToken(code: str) -> str:
    if not clientId or not clientSecret:
        raise ConfigNotSetError("getToken")
    if not isinstance(code, str):
        raise TypeError("code must be a string")
    payload = {'client_id': clientId, 'client_secret': clientSecret, 'code': code}
    resp = requests.post(CONST.EXCHANGE_URL, data=payload)
    resp.raise_for_status()  # Proper error handling
    return resp.json()["access_token"]

# Function to retrieve information from the API
def getInfo(bearer: str, endpoint: str, extractNode: Optional[List[str]] = None) -> Dict[str, Any]:
    if not isinstance(bearer, str):
        raise TypeError("bearer must be a string")
    if not isinstance(endpoint, str):
        raise TypeError("endpoint must be a string")
    if extractNode is not None and not isinstance(extractNode, list):
        raise TypeError("extractNode must be a list of strings")
    
    URL = f"{CONST.INFO_URL}{endpoint}"
    headers = {'Authorization': f'Bearer {bearer}'}
    resp = requests.get(URL, headers=headers)
    resp.raise_for_status()  # Proper error handling
    content = resp.json()

    if extractNode is None:
        return content
    else:
        return {node: content.get(node) for node in extractNode}

# Function to retrieve user information
def getUserInfo(bearer: str) -> Dict[str, Any]:
    return getInfo(bearer, "v2/my/info")

# Function to retrieve user district information
def getUserDistrict(bearer: str) -> Dict[str, Any]:
    return getInfo(bearer, "v2/my/district")

# Function to retrieve user profiles
def getUserProfiles(bearer: str) -> Dict[str, Any]:
    return getInfo(bearer, "v2/my/profiles")

# Function to retrieve user children information
def getUserChildren(bearer: str) -> Dict[str, Any]:
    return getInfo(bearer, "v2/my/students")

# Function to retrieve user groups
def getUserGroups(bearer: str) -> Dict[str, Any]:
    return getInfo(bearer, "my/groups")
