const axios = require('axios');
const querystring = require('querystring');

// Custom error for configuration issues
class ConfigNotSetError extends Error {
    constructor(value) {
        super(`The config is not set. You need to call setConfig(client_Id, client_Secret) before ${value}`);
        this.name = 'ConfigNotSetError';
    }
}

// Constants class to hold URLs
const CONST = {
    AUTH_URL: "https://launchpad.classlink.com/oauth2/v2/auth",
    EXCHANGE_URL: "https://launchpad.classlink.com/oauth2/v2/token",
    INFO_URL: "https://nodeapi.classlink.com/"
};

// Global variables to store client ID and client secret
let clientId = null;
let clientSecret = null;

// Function to set the client ID and client secret
function setConfig(client_Id, client_Secret) {
    if (typeof client_Id !== 'string') {
        throw new TypeError("clientId must be a string");
    }
    if (typeof client_Secret !== 'string') {
        throw new TypeError("clientSecret must be a string");
    }
    clientId = client_Id;
    clientSecret = client_Secret;
}

// Function to generate the authorization URL
function getCodeURL(scope = "profile", redirectURI = "http://localhost:8080/code") {
    if (!clientId) {
        throw new ConfigNotSetError("getCodeURL");
    }
    const queryStr = querystring.stringify({ client_id: clientId, scope, redirect_uri: redirectURI, response_type: "code" });
    return `${CONST.AUTH_URL}?${queryStr}`;
}

// Function to exchange authorization code for access token
async function getToken(code) {
    if (!clientId || !clientSecret) {
        throw new ConfigNotSetError("getToken");
    }
    if (typeof code !== 'string') {
        throw new TypeError("code must be a string");
    }
    const payload = { client_id: clientId, client_secret: clientSecret, code };
    const resp = await axios.post(CONST.EXCHANGE_URL, querystring.stringify(payload));
    return resp.data.access_token;
}

// Function to retrieve information from the API
async function getInfo(bearer, endpoint, extractNode = null) {
    if (typeof bearer !== 'string') {
        throw new TypeError("bearer must be a string");
    }
    if (typeof endpoint !== 'string') {
        throw new TypeError("endpoint must be a string");
    }
    if (extractNode !== null && !Array.isArray(extractNode)) {
        throw new TypeError("extractNode must be a list of strings");
    }
    
    const URL = `${CONST.INFO_URL}${endpoint}`;
    const headers = { Authorization: `Bearer ${bearer}` };
    const resp = await axios.get(URL, { headers });
    const content = resp.data;

    if (extractNode === null) {
        return content;
    } else {
        const result = {};
        extractNode.forEach(node => {
            if (node in content) {
                result[node] = content[node];
            }
        });
        return result;
    }
}

// Function to retrieve user information
async function getUserInfo(bearer) {
    return await getInfo(bearer, "v2/my/info");
}

// Function to retrieve user district information
async function getUserDistrict(bearer) {
    return await getInfo(bearer, "v2/my/district");
}

// Function to retrieve user profiles
async function getUserProfiles(bearer) {
    return await getInfo(bearer, "v2/my/profiles");
}

// Function to retrieve user children information
async function getUserChildren(bearer) {
    return await getInfo(bearer, "v2/my/students");
}

// Function to retrieve user groups
async function getUserGroups(bearer) {
    return await getInfo(bearer, "my/groups");
}

module.exports = {
    setConfig,
    getCodeURL,
    getToken,
    getUserInfo,
    getUserDistrict,
    getUserProfiles,
    getUserChildren,
    getUserGroups
};
