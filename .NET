using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace MyNamespace
{
    // Custom exception for configuration errors
    public class ConfigNotSetError : Exception
    {
        public ConfigNotSetError(string value)
            : base($"The config is not set. You need to call SetConfig(clientId, clientSecret) before {value}")
        {
        }
    }

    // Class to hold constant URLs used for authentication and API requests
    public static class CONST
    {
        public const string AuthUrl = "https://launchpad.classlink.com/oauth2/v2/auth";
        public const string ExchangeUrl = "https://launchpad.classlink.com/oauth2/v2/token";
        public const string InfoUrl = "https://nodeapi.classlink.com/";
    }

    // Static class to store global client ID and client secret
    public static class Config
    {
        public static string ClientId { get; private set; }
        public static string ClientSecret { get; private set; }

        // Method to set the client ID and client secret
        public static void SetConfig(string clientId, string clientSecret)
        {
            if (string.IsNullOrEmpty(clientId))
            {
                throw new ArgumentException("clientId must be a string");
            }

            if (string.IsNullOrEmpty(clientSecret))
            {
                throw new ArgumentException("clientSecret must be a string");
            }

            ClientId = clientId;
            ClientSecret = clientSecret;
        }
    }

    public static class ApiClient
    {
        private static readonly HttpClient HttpClient = new HttpClient();

        // Method to generate the authorization URL
        public static string GetCodeUrl(string scope = "profile", string redirectUri = "http://localhost:8080/code")
        {
            if (string.IsNullOrEmpty(Config.ClientId))
            {
                throw new ConfigNotSetError("GetCodeUrl");
            }

            var queryString = $"client_id={Config.ClientId}&scope={scope}&redirect_uri={redirectUri}&response_type=code";
            return $"{CONST.AuthUrl}?{queryString}";
        }

        // Method to exchange authorization code for access token
        public static async Task<string> GetTokenAsync(string code)
        {
            if (string.IsNullOrEmpty(Config.ClientId) || string.IsNullOrEmpty(Config.ClientSecret))
            {
                throw new ConfigNotSetError("GetToken");
            }

            if (string.IsNullOrEmpty(code))
            {
                throw new ArgumentException("code must be a string");
            }

            var payload = new Dictionary<string, string>
            {
                { "client_id", Config.ClientId },
                { "client_secret", Config.ClientSecret },
                { "code", code }
            };

            var response = await HttpClient.PostAsync(CONST.ExchangeUrl, new FormUrlEncodedContent(payload));
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(content);
            return json.access_token;
        }

        // Method to retrieve information from the API
        public static async Task<Dictionary<string, object>> GetInfoAsync(string bearer, string endpoint, List<string> extractNode = null)
        {
            if (string.IsNullOrEmpty(bearer))
            {
                throw new ArgumentException("bearer must be a string");
            }

            if (string.IsNullOrEmpty(endpoint))
            {
                throw new ArgumentException("endpoint must be a string");
            }

            if (extractNode != null && extractNode.GetType() != typeof(List<string>))
            {
                throw new ArgumentException("extractNode must be a list of strings");
            }

            var url = $"{CONST.InfoUrl}{endpoint}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("Authorization", $"Bearer {bearer}");

            var response = await HttpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
            var jsonResponse = JsonConvert.DeserializeObject<Dictionary<string, object>>(content);

            if (extractNode == null)
            {
                return jsonResponse;
            }

            var result = new Dictionary<string, object>();
            foreach (var node in extractNode)
            {
                if (jsonResponse.ContainsKey(node))
                {
                    result[node] = jsonResponse[node];
                }
            }

            return result;
        }

        // Method to retrieve user information
        public static Task<Dictionary<string, object>> GetUserInfoAsync(string bearer)
        {
            return GetInfoAsync(bearer, "v2/my/info");
        }

        // Method to retrieve user district information
        public static Task<Dictionary<string, object>> GetUserDistrictAsync(string bearer)
        {
            return GetInfoAsync(bearer, "v2/my/district");
        }

        // Method to retrieve user profiles
        public static Task<Dictionary<string, object>> GetUserProfilesAsync(string bearer)
        {
            return GetInfoAsync(bearer, "v2/my/profiles");
        }

        // Method to retrieve user children information
        public static Task<Dictionary<string, object>> GetUserChildrenAsync(string bearer)
        {
            return GetInfoAsync(bearer, "v2/my/students");
        }

        // Method to retrieve user groups
        public static Task<Dictionary<string, object>> GetUserGroupsAsync(string bearer)
        {
            return GetInfoAsync(bearer, "my/groups");
        }
    }
}
