require 'net/http'
require 'uri'
require 'json'

# This class handles OAuth interactions, including setting configuration, generating authorization URLs,
# obtaining access tokens, and making API requests using the access tokens.
class OAuthService
  # Class-level variables to store the client ID and secret
  @@client_id = nil
  @@client_secret = nil

  # Constants for OAuth and API endpoint URLs
  AUTH_URL = "https://launchpad.classlink.com/oauth2/v2/auth"
  EXCHANGE_URL = "https://launchpad.classlink.com/oauth2/v2/token"
  INFO_URL = "https://nodeapi.classlink.com/"

  # Sets the client ID and client secret for the OAuth service
  # @param [String] client_id the OAuth client ID
  # @param [String] client_secret the OAuth client secret
  def self.set_config(client_id, client_secret)
    if client_id.empty? || client_secret.empty?
      raise ArgumentError, 'Client ID and Client Secret must be provided and non-empty.'
    end
    @@client_id = client_id
    @@client_secret = client_secret
  end

  # Generates a URL for obtaining the OAuth authorization code
  # @param [String] scope the scope of the access request
  # @param [String] redirect_uri the URI to redirect to after authorization
  # @return [String] the complete URL to direct a user to for authorization
  def self.get_code_url(scope = 'profile', redirect_uri = 'http://localhost:8080/code')
    if @@client_id.nil?
      raise 'Configuration not set. Call set_config before requesting the URL'
    end

    uri = URI(AUTH_URL)
    uri.query = URI.encode_www_form({
      'client_id' => @@client_id,
      'scope' => scope,
      'redirect_uri' => redirect_uri,
      'response_type' => 'code'
    })
    uri.to_s
  end

  # Retrieves an access token using an authorization code
  # @param [String] code the authorization code received from the OAuth provider
  # @return [String] the access token
  def self.get_token(code)
    if @@client_id.nil? || @@client_secret.nil?
      raise 'Configuration not set. Call set_config before requesting the token'
    end
    if code.empty?
      raise ArgumentError, 'Code must be a non-empty string.'
    end

    uri = URI(EXCHANGE_URL)
    response = Net::HTTP.post_form(uri, {
      'client_id' => @@client_id,
      'client_secret' => @@client_secret,
      'code' => code
    })
    result = JSON.parse(response.body)
    unless result.key?('access_token')
      raise 'Token not found in the response'
    end
    result['access_token']
  end

  # Makes a GET request to an API endpoint using an access token
  # @param [String] bearer the access token
  # @param [String] endpoint the API endpoint to request data from
  # @return [Hash] parsed JSON response from the API
  def self.get_info(bearer, endpoint)
    if bearer.empty? || endpoint.empty?
      raise ArgumentError, 'Bearer token and endpoint must be non-empty strings.'
    end

    uri = URI("#{INFO_URL}#{endpoint}")
    request = Net::HTTP::Get.new(uri)
    request['Authorization'] = "Bearer #{bearer}"

    response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|
      http.request(request)
    end
    JSON.parse(response.body)
  end
end
