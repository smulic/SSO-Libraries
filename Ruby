require 'net/http'
require 'uri'
require 'json'

# Custom exception for configuration errors
class ConfigNotSetError < StandardError
  def initialize(value)
    @value = "The config is not set. You need to call setConfig(client_Id, client_Secret) before #{value}"
  end

  def to_s
    @value
  end
end

# Class to hold constant URLs used for authentication and API requests
class CONST
  AUTH_URL = "https://launchpad.classlink.com/oauth2/v2/auth"
  EXCHANGE_URL = "https://launchpad.classlink.com/oauth2/v2/token"
  INFO_URL = "https://nodeapi.classlink.com/"
end

# Global variables to store client ID and client secret
$clientId = nil
$clientSecret = nil

# Function to set the client ID and client secret
def setConfig(client_Id, client_Secret)
  unless client_Id.is_a?(String)
    raise ArgumentError, "clientId must be a string"
  end

  unless client_Secret.is_a?(String)
    raise ArgumentError, "clientSecret must be a string"
  end

  $clientId = client_Id
  $clientSecret = client_Secret
end

# Function to generate the authorization URL
def getCodeURL(scope = "profile", redirectURI = "http://localhost:8080/code")
  raise ConfigNotSetError.new("getCodeURL") unless $clientId

  queryStr = URI.encode_www_form(
    "client_id" => $clientId,
    "scope" => scope,
    "redirect_uri" => redirectURI,
    "response_type" => "code"
  )

  "#{CONST::AUTH_URL}?#{queryStr}"
end

# Function to exchange authorization code for access token
def getToken(code)
  raise ConfigNotSetError.new("getToken") unless $clientId && $clientSecret

  unless code.is_a?(String)
    raise TypeError, "code must be a string"
  end

  uri = URI(CONST::EXCHANGE_URL)
  payload = {
    'client_id' => $clientId,
    'client_secret' => $clientSecret,
    'code' => code
  }

  response = Net::HTTP.post_form(uri, payload)
  raise "Request failed with response code #{response.code}" unless response.is_a?(Net::HTTPSuccess)

  JSON.parse(response.body)["access_token"]
end

# Function to retrieve information from the API
def getInfo(bearer, endpoint, extractNode = nil)
  unless bearer.is_a?(String)
    raise TypeError, "bearer must be a string"
  end

  unless endpoint.is_a?(String)
    raise TypeError, "endpoint must be a string"
  end

  if extractNode && !extractNode.is_a?(Array)
    raise TypeError, "extractNode must be a list of strings"
  end

  url = URI("#{CONST::INFO_URL}#{endpoint}")
  request = Net::HTTP::Get.new(url)
  request["Authorization"] = "Bearer #{bearer}"

  response = Net::HTTP.start(url.hostname, url.port, use_ssl: true) { |http| http.request(request) }
  raise "Request failed with response code #{response.code}" unless response.is_a?(Net::HTTPSuccess)

  content = JSON.parse(response.body)
  return content unless extractNode

  content.slice(*extractNode)
end

# Function to retrieve user information
def getUserInfo(bearer)
  getInfo(bearer, "v2/my/info")
end

# Function to retrieve user district information
def getUserDistrict(bearer)
  getInfo(bearer, "v2/my/district")
end

# Function to retrieve user profiles
def getUserProfiles(bearer)
  getInfo(bearer, "v2/my/profiles")
end

# Function to retrieve user children information
def getUserChildren(bearer)
  getInfo(bearer, "v2/my/students")
end

# Function to retrieve user groups
def getUserGroups(bearer)
  getInfo(bearer, "my/groups")
end
