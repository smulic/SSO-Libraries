package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
)

// Custom error for configuration errors
type ConfigNotSetError struct {
	Message string
}

func (e *ConfigNotSetError) Error() string {
	return fmt.Sprintf("The config is not set. You need to call setConfig(client_Id, client_Secret) before %s", e.Message)
}

// Struct to hold constant URLs used for authentication and API requests
type CONST struct{}

const (
	AUTH_URL    = "https://launchpad.classlink.com/oauth2/v2/auth"
	EXCHANGE_URL = "https://launchpad.classlink.com/oauth2/v2/token"
	INFO_URL     = "https://nodeapi.classlink.com/"
)

// Global variables to store client ID and client secret
var clientId string
var clientSecret string

// Function to set the client ID and client secret
func setConfig(client_Id, client_Secret string) error {
	if client_Id == "" {
		return errors.New("clientId must be a string")
	}
	if client_Secret == "" {
		return errors.New("clientSecret must be a string")
	}
	clientId = client_Id
	clientSecret = client_Secret
	return nil
}

// Function to generate the authorization URL
func getCodeURL(scope, redirectURI string) (string, error) {
	if clientId == "" {
		return "", &ConfigNotSetError{"getCodeURL"}
	}
	if scope == "" {
		scope = "profile"
	}
	if redirectURI == "" {
		redirectURI = "http://localhost:8080/code"
	}
	queryParams := url.Values{
		"client_id":     {clientId},
		"scope":         {scope},
		"redirect_uri":  {redirectURI},
		"response_type": {"code"},
	}
	return fmt.Sprintf("%s?%s", AUTH_URL, queryParams.Encode()), nil
}

// Function to exchange authorization code for access token
func getToken(code string) (string, error) {
	if clientId == "" || clientSecret == "" {
		return "", &ConfigNotSetError{"getToken"}
	}
	if code == "" {
		return "", errors.New("code must be a string")
	}
	payload := url.Values{
		"client_id":     {clientId},
		"client_secret": {clientSecret},
		"code":          {code},
	}
	resp, err := http.PostForm(EXCHANGE_URL, payload)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("request failed with status: %s", resp.Status)
	}

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", err
	}

	accessToken, ok := result["access_token"].(string)
	if !ok {
		return "", errors.New("access_token not found in response")
	}
	return accessToken, nil
}

// Function to retrieve information from the API
func getInfo(bearer, endpoint string, extractNode []string) (map[string]interface{}, error) {
	if bearer == "" {
		return nil, errors.New("bearer must be a string")
	}
	if endpoint == "" {
		return nil, errors.New("endpoint must be a string")
	}

	URL := fmt.Sprintf("%s%s", INFO_URL, endpoint)
	req, err := http.NewRequest("GET", URL, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", bearer))

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("request failed with status: %s", resp.Status)
	}

	var content map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&content); err != nil {
		return nil, err
	}

	if extractNode == nil {
		return content, nil
	}

	result := make(map[string]interface{})
	for _, node := range extractNode {
		if value, exists := content[node]; exists {
			result[node] = value
		}
	}
	return result, nil
}

// Function to retrieve user information
func getUserInfo(bearer string) (map[string]interface{}, error) {
	return getInfo(bearer, "v2/my/info", nil)
}

// Function to retrieve user district information
func getUserDistrict(bearer string) (map[string]interface{}, error) {
	return getInfo(bearer, "v2/my/district", nil)
}

// Function to retrieve user profiles
func getUserProfiles(bearer string) (map[string]interface{}, error) {
	return getInfo(bearer, "v2/my/profiles", nil)
}

// Function to retrieve user children information
func getUserChildren(bearer string) (map[string]interface{}, error) {
	return getInfo(bearer, "v2/my/students", nil)
}

// Function to retrieve user groups
func getUserGroups(bearer string) (map[string]interface{}, error) {
	return getInfo(bearer, "my/groups", nil)
}

func main() {
	// Example usage
	err := setConfig("your_client_id", "your_client_secret")
	if err != nil {
		fmt.Println("Error setting config:", err)
		return
	}

	authURL, err := getCodeURL("", "")
	if err != nil {
		fmt.Println("Error getting auth URL:", err)
		return
	}
	fmt.Println("Auth URL:", authURL)

	token, err := getToken("your_authorization_code")
	if err != nil {
		fmt.Println("Error getting token:", err)
		return
	}
	fmt.Println("Access Token:", token)

	userInfo, err := getUserInfo(token)
	if err != nil {
		fmt.Println("Error getting user info:", err)
		return
	}
	fmt.Println("User Info:", userInfo)
}
